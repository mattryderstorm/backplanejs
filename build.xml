<?xml version="1.0" encoding="utf-8"?>
<!--
   - Copyright (c) 2009 Backplane Ltd.
   -
   - Licensed under the Apache License, Version 2.0 (the "License");
   - you may not use this file except in compliance with the License.
   - You may obtain a copy of the License at
   -
   -  http://www.apache.org/licenses/LICENSE-2.0
   -
   - Unless required by applicable law or agreed to in writing, software
   - distributed under the License is distributed on an "AS IS" BASIS,
   - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   - See the License for the specific language governing permissions and
   - limitations under the License.
   -->
<project name="backplanejs" default="help" basedir=".">
	<description>
		Ant project for various backplanejs tasks.
	</description>

	<target name="help">
		<echo>The following targets are supported:</echo>
		<echo />
		<echo>jslint:</echo>
		<echo>  Run JSLint on all JavaScript files.</echo>
		<echo />
		<echo>tidy-js:</echo>
		<echo>  Do some basic tidying up of source files, such as ensuring they use CRLF.</echo>
		<echo />
		<echo>prime-deploy:</echo>
		<echo>  Prime the deployment directory, either for testing, or for a release.</echo>
		<echo />
		<echo>min:</echo>
		<echo>  Compress the main JS and CSS files.</echo>
		<echo />
		<echo>release:</echo>
		<echo>  Create a deployment archive, and then upload it to Google Code.</echo>
	</target>

	<target name="-load.properties">
		<property file="ant.properties" />
		<property file="my.ant.properties" />
	</target>

	<target name="-init" depends="-load.properties">
		<path id="ant.tasks.classpath">
			<fileset dir="${tools.dir}">
				<include name="ant-apache-bsf-1.7.1.jar" />
				<include name="ant-googlecode-0.0.2.jar" />
				<include name="bsf.jar" />
				<include name="commons-logging-1.1.1.jar" />
				<include name="yuicompressor-2.4.2.jar" />
			</fileset>
		</path>

		<scriptdef
			name="jslint"
			src="${tools.dir}/fulljslint-for-ant.js" language="javascript"
			classpathref="ant.tasks.classpath"
		>
			<attribute name="options" />
			<element name="fileset" type="fileset" />
		</scriptdef>

		<taskdef
			name="gcupload"
			classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
			classpathref="ant.tasks.classpath"
		/>
	</target>

	<target name="jslint" depends="-init">
		<description>
			Run JSLint on the scripts.
		</description>

		<jslint options="{ browser: true, devel: true, debug: true, evil: true, laxbreak: true, forin: true, sub: true, css: true, cap: true, on: true, fragment: true }">
		<!-- jslint options="{passfail: false, white: false, laxbreak: true, browser: true, debug: false, devel: true, eqeqeq: false, evi: true, fragment: true, immed: false, nomen: false, on: true, onevar: false, plusplus: false, regexp: false, sub: true}" -->
			<fileset dir="${src.dir}">
				<!-- This collection is the same as in 'tidy-js' -->
				<include name="**/*.js" />
				<exclude name="_samples/**/*.js" />
				<exclude name="_unit-tests/**/*.js" />
				<exclude name="build/**/*.js" />
				<exclude name="deploy/**/*.js" />
				<exclude name="drupal/**/*.js" />
				<exclude name="rdfa/_unit-tests/**/*.js" />
				<exclude name="smil/**/*.js" />
				<exclude name="third-party/uxf/build/**/*.js" />
				<exclude name="third-party/uxf/samples/**/*.js" />
				<exclude name="third-party/uxf/src/lib/ajaxslt/**/*.js" />
				<exclude name="third-party/uxf/src/lib/backplane/_unit-tests/**/*.js" />
				<exclude name="third-party/uxf/src/lib/backplane/notify/assets/**/*.js" />
				<exclude name="third-party/uxf/src/lib/third-party/**/*.js" />
				<exclude name="third-party/uxf/testsuite/**/*.js" />
				<exclude name="third-party/uxf/unit-tests/**/*.js" />
				<exclude name="third-party/yui/**/*.js" />
				<exclude name="_samples/**/*.js" />
				<exclude name="tools/**/*.js" />
				<exclude name="_unit-tests/**/*.js" />
			</fileset>
 		</jslint>
	</target>

	<target name="jslint-deploy" depends="-init">
		<description>
			Run JSLint on the scripts.
		</description>

		<jslint options="{ browser: true, devel: true, debug: true, evil: true, laxbreak: true, forin: true, sub: true, css: true, cap: true, on: true, fragment: true }">
		<!-- jslint options="{passfail: false, white: false, laxbreak: true, browser: true, debug: false, devel: true, eqeqeq: false, evi: true, fragment: true, immed: false, nomen: false, on: true, onevar: false, plusplus: false, regexp: false, sub: true}" -->
			<fileset dir="${deploy.dir}">
				<include name="backplane.js" />
			</fileset>
 		</jslint>
	</target>

	<target name="tidy-js" depends="-init">
		<description>
			Do some basic tidying up of JS files ready for JSLint.
		</description>

		<fixcrlf srcdir="${src.dir}" eol="crlf" eof="remove">
			<!-- This collection is the same as in 'jslint' -->
			<include name="**/*.js" />
			<exclude name="_samples/**/*.js" />
			<exclude name="_unit-tests/**/*.js" />
			<exclude name="build/**/*.js" />
			<exclude name="deploy/**/*.js" />
			<exclude name="drupal/**/*.js" />
			<exclude name="rdfa/_unit-tests/**/*.js" />
			<exclude name="smil/**/*.js" />
			<exclude name="third-party/uxf/build/**/*.js" />
			<exclude name="third-party/uxf/samples/**/*.js" />
			<exclude name="third-party/uxf/src/lib/ajaxslt/**/*.js" />
			<exclude name="third-party/uxf/src/lib/backplane/notify/assets/**/*.js" />
			<exclude name="third-party/uxf/src/lib/backplane/_unit-tests/**/*.js" />
			<exclude name="third-party/uxf/src/lib/third-party/**/*.js" />
			<exclude name="third-party/uxf/testsuite/**/*.js" />
			<exclude name="third-party/uxf/unit-tests/**/*.js" />
			<exclude name="third-party/yui/**/*.js" />
			<exclude name="_samples/**/*.js" />
			<exclude name="tools/**/*.js" />
			<exclude name="_unit-tests/**/*.js" />
		</fixcrlf>
	</target>

	<target name="-create-css" depends="-init, -create-js">
		<description>
			Create the CSS file. The only reason there is a dependency on
			create-js is because we need the assets to have been copied.
		</description>

		<concat destfile="${output.dir}/${product.name}.css" force="no" eol="crlf">
			<fileset dir="${output.dir}/assets">
				<include name="**/*.css" />
				<exclude name="**/lens/*.css" />
			</fileset>
		</concat>
	</target>

	<target name="create-unit-tests" depends="-init">
		<description>
			Create the unit test files, by concatenating the individual
			unit tests.
		</description>

		<copy file="${tools.dir}/tests/unit-test-runner.js" tofile="_unit-tests/unit-test-runner.js" failonerror="true" />

		<!--
			Backplane
		-->
		<concat destfile="_unit-tests/backplane/unit-tests.js" force="no" eol="crlf">
			<fileset dir="third-party/uxf/src/lib/backplane/_unit-tests">
				<include name="**/*.js" />
			</fileset>
		</concat>
		<copy file="${tools.dir}/tests/unit.html" tofile="_unit-tests/backplane/main.html" failonerror="true" />

		<!--
			RDFa
		-->
		<concat destfile="_unit-tests/rdfa/unit-tests.js" force="no" eol="crlf">
			<fileset dir="rdfa/_unit-tests">
				<include name="**/*.js" />
			</fileset>
		</concat>
		<copy file="${tools.dir}/tests/unit.html" tofile="_unit-tests/rdfa/main.html" failonerror="true" />

		<!--
			XForms
		-->
		<concat destfile="_unit-tests/xforms/unit-tests.js" force="no" eol="crlf">
			<fileset dir="third-party/uxf/unit-tests">
				<include name="**/*.js" />
				<exclude name="unit-test-loader.js" />
			</fileset>
		</concat>
		<copy file="${tools.dir}/tests/unit.html" tofile="_unit-tests/xforms/main.html" failonerror="true" />
	</target>

	<target name="-create-js" depends="-init">
		<description>
			Create the JS file.
		</description>

		<exec executable="sprocketize" output="${output.dir}/${product.name}.js" failonerror="true" logError="true">
			<arg line="-I . -I build -I third-party -I third-party/uxf/src -I third-party/uxf/src/lib -I third-party/uxf/src/lib/backplane" />
			<arg value="copyright.txt" />
			<arg value="${build.dir}/${product.name}.js" />
			<arg value="-a${output.dir}/assets" />
		</exec>
	</target>

	<target name="prime-deploy" depends="-init, -create-js, -create-css">
		<description>
			Create a set of deployment files, for testing or distribution.
		</description>

		<copy todir="${deploy.dir}" failonerror="true">
			<fileset dir="${output.dir}">
				<include name="${product.name}.js" />
			</fileset>
		</copy>

		<copy todir="${deploy.dir}/assets" failonerror="true">
			<fileset dir="${output.dir}">
				<include name="${product.name}.css" />
			</fileset>
			<fileset dir="${output.dir}/assets">
				<include name="bg-fader.gif" />
				<include name="decorator.xml" />
				<include name="decorate.htc" />
				<include name="instance.htc" />
				<include name="onload.xml" />
				<include name="select-deselected.png" />
				<include name="select-selected.png" />
				<include name="select1-deselected.png" />
				<include name="select1-selected.png" />
				<include name="thumb-n.gif" />
				<include name="lens/*" />
			</fileset>
		</copy>
	</target>

	<target name="-min-css" depends="-init, prime-deploy">
		<description>
			Minify the CSS file.
		</description>

		<java
			classname="com.yahoo.platform.yui.compressor.YUICompressor"
			classpathref="ant.tasks.classpath"
			fork="true"
			failonerror="true"
		>
			<arg line="-o ${deploy.dir}/assets/${product.name}-min.css ${deploy.dir}/assets/${product.name}.css" />
		</java>

		<!--
			Browsers seem to be unable to use the compressed CSS file, so as
			a temporary workaround we just copy the uncompressed file back over
			the compressed one.

			See issue 8.
		-->
		<copy
			file="${deploy.dir}/assets/${product.name}.css"
			tofile="${deploy.dir}/assets/${product.name}-min.css"
			failonerror="true"
			overwrite="true"
		/>
	</target>

	<target name="-min-js" depends="-init, prime-deploy">
		<description>
			Minify the JS file.
		</description>

		<java
			classname="com.yahoo.platform.yui.compressor.YUICompressor"
			classpathref="ant.tasks.classpath"
			fork="true"
			failonerror="true"
		>
			<arg line="-o ${deploy.dir}/${product.name}-min.js ${deploy.dir}/${product.name}.js" />
		</java>
	</target>

	<target name="min" depends="-init, -min-js, -min-css">
		<description>
			Minify everything, ready for distribution.
		</description>
	</target>

	<target name="create-deploy-package" depends="-init, min">
		<zip destfile="${deploy.root.dir}/${deploy.package.name}">
			<fileset dir="${deploy.dir}">
				<include name="**/*" />
				<exclude name="${product.name}.js" />
				<exclude name="assets/${product.name}.css" />
			</fileset>
		</zip>
	</target>

	<target name="release" depends="-init, create-deploy-package">
		<description>
			Create a release by uploading the package to Google Code.
		</description>

		<fail unless="gc.username" message="Missing property 'gc.username' from file 'my.ant.properties'." />
		<fail unless="gc.password" message="Missing property 'gc.password' from file 'my.ant.properties'." />

		<gcupload
			username="${gc.username}"
			password="${gc.password}"
			projectname="${project.name}"
			filename="${deploy.root.dir}/${deploy.package.name}"
			targetfilename="${deploy.package.name}"
			summary="${project.name} deployment package, version ${version.number}"
			labels="Type-Archive, OpSys-All, Featured"
		/>
	</target>

	<target name="prime-deploy-to-app-engine" depends="-init, min">
		<copy todir="${deploy.root.dir}" failonerror="true">
			<fileset dir="${tools.dir}/GoogleAppEngine" />
		</copy>

		<copy todir="${deploy.root.dir}/samples" failonerror="true">
			<fileset dir="_samples" />
		</copy>

		<replace dir="${deploy.root.dir}/samples" token="../../deploy/backplanejs" value="/backplanejs">
			<include name="**/*.html"/>
		</replace>
	</target>

	<target name="deploy-to-app-engine" depends="-init, prime-deploy-to-app-engine">
		<exec executable="appcfg.py" failonerror="true" inputstring="${gae.password}">
			<arg line="--passin -e ${gae.username} update ${deploy.root.dir}/" />
		</exec>
	</target>

	<target name="serve" depends="-init">
		<exec executable="dev_appserver.py">
			<arg line="${deploy.root.dir}" />
		</exec>
	</target>
</project>
