<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>
<!--
   - Copyright (c) 2009-2010 Mark Birbeck
   -
   - Licensed under the Apache License, Version 2.0 (the "License");
   - you may not use this file except in compliance with the License.
   - You may obtain a copy of the License at
   -
   -  http://www.apache.org/licenses/LICENSE-2.0
   -
   - Unless required by applicable law or agreed to in writing, software
   - distributed under the License is distributed on an "AS IS" BASIS,
   - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   - See the License for the specific language governing permissions and
   - limitations under the License.
   -->
<project name="backplanejs-tools" default="help" basedir=".">
	<description>
		Ant project for the backplanejs tools.
	</description>
	<dirname property="backplanejs.tools.base.dir" file="${ant.file.backplanejs-tools}" />

	<property file="${backplanejs.tools.base.dir}/my.ant.properties" />
	<property file="${backplanejs.tools.base.dir}/ant.properties" />
	<property file="${backplanejs.tools.base.dir}/drupal.ant.properties" />

	<import file="${backplanejs.tools.base.dir}/GoogleAppEngine/gae.xml" />
	<import file="${backplanejs.tools.base.dir}/selenium-rc/selenium-rc.xml" />
	<import file="${backplanejs.tools.base.dir}/yuitest-selenium/yuitest-selenium.xml" />

	<path id="ant.tasks.classpath">
		<fileset dir="${backplanejs.tools.base.dir}">
			<include name="ant-apache-bsf-1.7.1.jar" />
			<include name="ant-googlecode-0.0.2.jar" />
			<include name="bsf.jar" />
			<include name="commons-logging-1.1.1.jar" />
			<include name="yuicompressor-2.4.2.jar" />
		</fileset>
	</path>

	<scriptdef
		name="jslint"
		src="${backplanejs.tools.base.dir}/fulljslint-for-ant.js" language="javascript"
		classpathref="ant.tasks.classpath"
	>
		<attribute name="options" />
		<element name="fileset" type="fileset" />
	</scriptdef>

	<taskdef
		name="gcupload"
		classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
		classpathref="ant.tasks.classpath"
	/>

	<!--
		This is a bit of a hack to work around Windows problems. There may
		be a better way to do this.
	-->
	<condition property="sprocketize.app.name" value="sprocketize.bat" else="sprocketize">
		<os family="windows" />
	</condition>

	<!--
		Phases
	-->
	<target name="generate-sources" description="Copy the source files into the correct location." />

	<target name="generate-resources" description="Copy the resource files into the correct location." />

	<target name="compile" depends="initialize" description="Create combined JS and CSS files from sources.">
		<antcall target="generate-sources" />
		<antcall target="generate-resources" />

		<!--
			Created a combined JS file.
		-->
		<exec executable="${sprocketize.app.name}" output="${output.dir}/${product.name}.js" failonerror="true" logError="true">
			<arg value="-I" />
			<arg value="." />
			<arg value="-I" />
			<arg value="build" />
			<arg value="-I" />
			<arg value="third-party" />
			<arg value="-I" />
			<arg value="third-party/uxf/src" />
			<arg value="-I" />
			<arg value="third-party/uxf/src/lib" />
			<arg value="-I" />
			<arg value="third-party/uxf/src/lib/backplane" />
			<arg value="copyright.txt" />
			<arg value="${build.dir}/${product.name}.js" />
			<arg value="-a${output.dir}/assets" />
		</exec>

		<!--
			Created a combined CSS file.
		-->
		<concat destfile="${output.dir}/${product.name}.css" force="no" eol="crlf">
			<fileset dir="${output.dir}/assets">
				<include name="**/*.css" />
				<exclude name="**/lens/*.css" />
			</fileset>
		</concat>
	</target>

	<target name="test" depends="initialize" description="Run tests.">
		<antcall target="compile" />
		<antcall target="test-compile" />
		<antcall target="test-ut" />
	</target>

	<target name="package" depends="initialize, test" description="Create package for deployment.">
		<antcall target="-create-deploy-package" />
	</target>

	<target name="integration-test" depends="initialize, package" description="Test that the package deploys correctly.">
	</target>

	<target name="deploy" depends="initialize, package" description="Deploy the package.">
		<antcall target="-gcupload" />
	</target>

	<!--
		Goals
	-->
	<target name="validate">
		<fail unless="build.dir" message="Please set a value for 'build.dir'." />
		<fail unless="target.dir" message="Please set a value for 'target.dir'." />
	</target>

	<target name="initialize" depends="validate" description="Initialize the build state.">
		<mkdir dir="${target.dir}" />
	</target>

	<target name="clean" description="Remove the target directory ready for a clean build.">
		<delete dir="${target.dir}" />
	</target>

	<target name="test-compile" depends="initialize">
		<description>
			Create the unit test files, by concatenating the individual
			unit tests.
		</description>

		<!--
			YUI Unit Test Runner
		-->
		<concat destfile="${output.dir}/unit-tests/unit-test-runner.js" force="no" eol="crlf">
			<fileset dir="${src.dir}/third-party/yui">
				<include name="logger.js" />
				<include name="yuitest.js" />
			</fileset>
			<fileset dir="${src.dir}/build/test">
				<include name="unit-test-runner.js" />
			</fileset>
		</concat>

		<!--
			Backplane
		-->
		<concat destfile="${output.dir}/unit-tests/backplane/unit-tests.js" force="no" eol="crlf">
			<fileset dir="${src.dir}/third-party/uxf/src/lib/backplane/_unit-tests">
				<include name="**/*.js" />
			</fileset>
		</concat>
		<copy file="${src.dir}/build/test/unit.html" tofile="${output.dir}/unit-tests/backplane/main.html" failonerror="true" />

		<!--
			Knowledgebase
		-->
		<concat destfile="${output.dir}/unit-tests/kb/unit-tests.js" force="no" eol="crlf">
			<fileset dir="${src.dir}/kb/_unit-tests">
				<include name="**/*.js" />
			</fileset>
		</concat>
		<copy file="${src.dir}/build/test/unit.html" tofile="${output.dir}/unit-tests/kb/main.html" failonerror="true" />

		<!--
			RDFa
		-->
		<concat destfile="${output.dir}/unit-tests/rdfa/unit-tests.js" force="no" eol="crlf">
			<fileset dir="${src.dir}/rdfa/_unit-tests">
				<include name="**/*.js" />
			</fileset>
		</concat>
		<copy file="${src.dir}/build/test/unit.html" tofile="${output.dir}/unit-tests/rdfa/main.html" failonerror="true" />

		<!--
			XForms
		-->
		<concat destfile="${output.dir}/unit-tests/xforms/unit-tests.js" force="no" eol="crlf">
			<fileset dir="${src.dir}/third-party/uxf/unit-tests">
				<include name="**/*.js" />
				<exclude name="unit-test-loader.js" />
			</fileset>
			<fileset dir="${src.dir}/third-party/uxf/src/lib/functions">
				<include name="**/ut-*.js" />
			</fileset>
		</concat>
		<copy file="${src.dir}/build/test/unit.html" tofile="${output.dir}/unit-tests/xforms/main.html" failonerror="true" />
	</target>

	<target name="test-ut" description="Run unit-tests.">
		<parallel>
			<daemons>
				<antcall target="start-selenium-rc" />
			</daemons>

			<sequential>
				<waitfor>
					<and>
						<socket server="${selenium-rc.host}" port="${selenium-rc.port}" />
					</and>
				</waitfor>
				<property name="unit-tests.dir" location="${output.dir}/unit-tests" />
				<copy todir="${output.dir}/unit-tests" failonerror="true">
					<fileset dir="${src.dir}/build/test" includes="test-list.xml"/>
					<filterset>
						<filter token="unit-tests.dir" value="${unit-tests.dir}"/>
					</filterset>
				</copy>
				<antcall target="run-yuitest-selenium">
					<param name="test.list" value="${output.dir}/unit-tests/test-list.xml"/>
				</antcall>
			</sequential>
		</parallel>
	</target>

	<!--
		S I T E
		=======
	-->
	<target name="pre-site" description="Executes processes needed prior to the actual project site generation.">
		<echo>
The target 'pre-site' has not been set. You need to define this
in your own build.xml so that backplanejs knows which files to
document.
		</echo>
		<fail />
	</target>

	<target
		name="site"
		depends="initialize, pre-site, -create-docs, post-site, backplanejs-tools.post-site"
		description="Generates the project's site documentation."
	/>

	<target
		name="post-site"
		description="Executes processes needed to finalize the site generation, and to prepare for site deployment."
	>
		<copy todir="${site.dir}" failonerror="true">
			<fileset dir="${output.dir}/site-out" />
		</copy>

		<copy todir="${site.dir}" failonerror="true" overwrite="true">
			<fileset dir="${backplanejs.tools.base.dir}/GoogleAppEngine" includes="app.yaml" />
			<filterset>
				<filter token="project.name" value="${project.name}"/>
				<filter token="version.number" value="${version.number}"/>
			</filterset>
		</copy>
	</target>

	<target
		name="site-deploy"
		depends="site"
		description="Deploys the generated site documentation to the specified web server."
	>
		<fail unless="gae.username" message="Missing property 'gae.username' from file 'my.ant.properties'." />
		<fail unless="gae.password" message="Missing property 'gae.password' from file 'my.ant.properties'." />

		<exec executable="appcfg.py" failonerror="true" inputstring="${gae.password}">
			<arg line="--passin -e ${gae.username} update ${site.dir}/" />
		</exec>
	</target>

	<!--
		H E L P E R   T A S K S
		=======================
	-->
	<target name="-create-docs" description="Create the project's site documentation.">
		<exec executable="python" failonerror="true">
			<arg value="${backplanejs.tools.base.dir}/yuidoc/bin/yuidoc.py" />
			<arg value="${output.dir}/site-in/docs" />
			<arg value="-p" />
			<arg value="${output.dir}/tmpdocs" />
			<arg value="-o" />
			<arg value="${output.dir}/site-out/docs" />
			<arg value="-t" />
			<arg value="${backplanejs.tools.base.dir}/yuidoc/template" />
			<arg value="-m" />
			<arg value="${project.name}" />
			<arg value="-Y" />
			<arg value="${yui.version}" />
			<arg value="-v" />
			<arg value="${version.number}" />
			<arg value="-u" />
			<arg value="${site.docs.project.url}" />
		</exec>
	</target>

</project>
