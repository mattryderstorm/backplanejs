<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./ant2html.xsl"?>
<!--
   - Copyright (c) 2009-2010 Mark Birbeck
   -
   - Licensed under the Apache License, Version 2.0 (the "License");
   - you may not use this file except in compliance with the License.
   - You may obtain a copy of the License at
   -
   -  http://www.apache.org/licenses/LICENSE-2.0
   -
   - Unless required by applicable law or agreed to in writing, software
   - distributed under the License is distributed on an "AS IS" BASIS,
   - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   - See the License for the specific language governing permissions and
   - limitations under the License.
   -->
<project name="backplanejs-tools" default="help" basedir=".">
	<description>
		Ant project for the backplanejs tools.
	</description>
	<dirname property="backplanejs.tools.base.dir" file="${ant.file.backplanejs-tools}" />

	<!--
		Automatically load property files for the host application.
	-->
	<property file="my.ant.properties" />
	<property file="ant.properties" />
	<property file="drupal.ant.properties" />

	<!--
		These properties may have been set in the host application property
		files, which will take priority over any settings made here.
	-->
	<property name="product.name" value="my-product" />
	<property name="project.name" value="my-project" />
	<filter token="project.name" value="${project.name}"/>
	<property name="version.number" value="SNAPSHOT" />
	<filter token="version.number" value="${version.number}"/>

	<property name="platform.name" value="some-platform" />
	<property name="platform.version" value="SNAPSHOT" />

	<property name="dist.package.name" value="${project.name}" />
	<property name="package.name" value="${project.name}-${version.number}-${platform.name}-${platform.version}" />

	<property name="build.dir" location="build" />
	<property name="src.dir" location="${build.dir}/src" />

	<property name="target.dir" location="target" />
	<property name="deploy.dir" location="${target.dir}/deploy" />
	<property name="output.dir" location="${target.dir}/output" />
	<filter token="output.dir" value="${output.dir}"/>
	<property name="package.dir" location="${target.dir}/packages/${package.name}" />
	<property name="reports.dir" location="${target.dir}/reports" />
	<property name="site.dir" location="${target.dir}/site" />
	<property name="site.docs.dir" location="${site.dir}/docs" />
	<property name="tmp.dir" location="${target.dir}/tmp" />
	<property name="tests.dir" location="${target.dir}/tests" />
	<filter token="tests.dir" value="${tests.dir}"/>
	<property name="unit-tests.dir" location="${tests.dir}/unit-tests" />
	<filter token="unit-tests.dir" value="${unit-tests.dir}"/>
	<property name="functional-tests.dir" location="${tests.dir}/functional-tests" />
	<filter token="functional-tests.dir" value="${functional-tests.dir}"/>
	<property name="integration-tests.dir" location="${tests.dir}/integration-tests" />
	<filter token="integration-tests.dir" value="${integration-tests.dir}"/>

	<property name="regression.test.suite" location="${build.dir}/xforms/functional-tests/regression-test-suite.html" />
	<property name="functional.test.suite" location="${build.dir}/xforms/functional-tests/functional-test-suite.html" />

	<property name="site.docs.project.url" value="http://example.com" />
	<!--
		End of properties.
	-->

	<!--
		Now load our tools.
	-->
	<import file="${backplanejs.tools.base.dir}/ant-contrib/ant-contrib.xml" />
	<import file="${backplanejs.tools.base.dir}/GoogleAppEngine/gae.xml" />
	<import file="${backplanejs.tools.base.dir}/selenium-rc/selenium-rc.xml" />
	<import file="${backplanejs.tools.base.dir}/yuitest-selenium/yuitest-selenium.xml" />

	<path id="ant.tasks.classpath">
		<fileset dir="${backplanejs.tools.base.dir}">
			<include name="ant-apache-bsf-1.7.1.jar" />
			<include name="ant-googlecode-0.0.2.jar" />
			<include name="bsf.jar" />
			<include name="commons-logging-1.1.1.jar" />
			<include name="yuicompressor-2.4.2.jar" />
		</fileset>
	</path>

	<scriptdef
		name="jslint"
		src="${backplanejs.tools.base.dir}/fulljslint-for-ant.js" language="javascript"
		classpathref="ant.tasks.classpath"
	>
		<attribute name="options" />
		<element name="fileset" type="fileset" />
	</scriptdef>

	<taskdef
		name="gcupload"
		classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask"
		classpathref="ant.tasks.classpath"
	/>

	<!--
		This is a bit of a hack to work around Windows problems. There may
		be a better way to do this.
	-->
	<condition property="sprocketize.app.name" value="sprocketize.bat" else="sprocketize">
		<os family="windows" />
	</condition>

	<condition property="on.windows">
		<os family="windows" />
	</condition>

	<target name="help">
		<echo>See http://code.google.com/p/backplanejs/wiki/UsingTools</echo>
	</target>

	<!--
		C L E A N
		=========
	-->
	<target name="pre-clean" description="Executes processes needed prior to the actual project cleaning." />
	<target name="-clean" description="Remove all files generated by the previous build.">
		<delete dir="${tmp.dir}" />
		<delete dir="${reports.dir}" />
		<delete dir="${package.dir}" />
		<delete dir="${tests.dir}" />
		<delete dir="${deploy.dir}" />

		<delete dir="${target.dir}" />
	</target>
	<target name="post-clean" description="Executes processes needed to finalize the project cleaning." />

	<target
	 name="clean"
	 depends="pre-clean, -clean, post-clean"
	 description="Remove all files generated by the previous build."
	/>

	<!--
		D E F A U L T   L I F E C Y C L E
		=================================
	-->
	<target name="validate">
		<fail unless="build.dir" message="Please set a value for 'build.dir'." />
		<fail unless="target.dir" message="Please set a value for 'target.dir'." />
	</target>

	<target name="initialize" depends="validate" description="Initialize the build state.">
		<mkdir dir="${target.dir}" />

		<mkdir dir="${deploy.dir}" />
		<mkdir dir="${tests.dir}" />
		<mkdir dir="${package.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<!--
		COMPILE
	-->
	<target name="generate-sources" description="Copy the source files into the correct location." />

	<target name="process-sources" description="Process the source code." />

	<target name="generate-resources" description="Copy the resource files into the correct location." />

	<target name="process-resources" description="Process the resources." />

	<target name="-compile" description="This task should be overridden in the host.">
		<echo>
The target '-compile' has not been set. You need to define this
in your own build.xml.
		</echo>
		<fail />
	</target>

	<target name="process-classes" description="Post-process the generated files from compilation." />

	<target
	 name="compile"
	 depends="initialize, generate-sources, process-sources, generate-resources, process-resources, -compile, process-classes"
	 description="Compile the source code of the project."
	/>

	<!--
		TEST-COMPILE
	-->
	<target name="generate-test-sources" description="Copy the test source files into the correct location." />

	<target name="process-test-sources" description="Process the test source code." />

	<target name="generate-test-resources" description="Copy the test resource files into the correct location." />

	<target name="process-test-resources" description="Process the resources." />

	<target name="unit-test-compile" description="This task should be overridden in the host.">
		<fail>
			The target 'unit-test-compile' has not been set. You need to define this in your own build.xml.
		</fail>
	</target>

	<target name="functional-test-compile" description="Create the functional test files.">
		<copy todir="${functional-tests.dir}" failonerror="true" filtering="true">
			<fileset dir="${build.dir}/xforms/functional-tests" includes="**/ft-*"/>
		</copy>
	</target>

	<target name="process-test-classes" description="Post-process the generated files from the test compilation." />

	<target
	 name="test-compile"
	 depends="initialize, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, unit-test-compile, functional-test-compile, process-test-classes"
	 description="Compile the test source code into the test directory."
	/>

	<!--
		TEST
	-->
	<target name="pre-start-test-server" description="Perform actions required before the test server is launched.">
		<copy file="${build.dir}/test/tests-app.yaml" tofile="${tests.dir}/app.yaml" failonerror="true" filtering="true" />
	</target>

	<target name="-start-test-server" description="Run the test server.">
		<antcall target="start-local-gae">
			<param name="gae.application.root" value="${tests.dir}"/>
		</antcall>
	</target>

	<target name="post-start-test-server" description="Perform actions required after the test server has shut down." />

	<target
	 name="start-test-server"
	 depends="initialize, pre-start-test-server, -start-test-server, post-start-test-server"
	 description="Launch a server for testing."
	/>

	<target name="unit-test" description="Run unit-tests.">
		<parallel>
			<daemons>
				<antcall target="start-selenium-rc" />
				<antcall target="start-test-server" />
			</daemons>

			<sequential>
				<waitfor>
					<and>
						<socket server="${selenium-rc.host}" port="${selenium-rc.port}" />
					</and>
				</waitfor>
				<waitfor>
					<and>
						<socket server="${gae.host}" port="${gae.port}" />
					</and>
				</waitfor>
				<copy todir="${unit-tests.dir}" failonerror="true" filtering="true">
					<fileset dir="${build.dir}/test" includes="unit-test-list.xml"/>
				</copy>
				<antcall target="run-yuitest-selenium">
					<param name="test.list" value="${unit-tests.dir}/unit-test-list.xml"/>
				</antcall>
			</sequential>
		</parallel>
	</target>

	<target name="functional-test" depends="functional-test-compile" description="Run regression tests.">
		<parallel>
			<daemons>
				<antcall target="start-test-server" />
			</daemons>

			<sequential>
				<waitfor>
					<and>
						<socket server="${gae.host}" port="${gae.port}" />
					</and>
				</waitfor>
				<selenese
					suite="${functional.test.suite}"
					browser="${selenese.browsers}"
					outputDir="${reports.dir}"
					startURL="http://${gae.host}:${gae.port}/functional-tests/"
					multiWindow="true"
					port="${selenium-rc.port}"
				/>
			</sequential>
		</parallel>
	</target>

	<target name="regression-test" depends="functional-test-compile" description="Run regression tests.">
		<parallel>
			<daemons>
				<antcall target="start-test-server" />
			</daemons>

			<sequential>
				<waitfor>
					<and>
						<socket server="${gae.host}" port="${gae.port}" />
					</and>
				</waitfor>
				<selenese
					suite="${regression.test.suite}"
					browser="${selenese.browsers}"
					outputDir="${reports.dir}"
					startURL="http://${gae.host}:${gae.port}/functional-tests/"
					multiWindow="true"
					port="${selenium-rc.port}"
				/>
			</sequential>
		</parallel>
	</target>

	<target name="test" depends="initialize, compile, test-compile, unit-test, functional-test, regression-test" description="Run tests." />

	<!--
		PACKAGE
	-->
	<target
		name="prepare-package"
		depends="compile"
		description="Perform any operations necessary to prepare a package before the actual packaging."
	>
		<copy todir="${package.dir}" failonerror="true">
			<fileset dir="${src.dir}" includes="copyright.txt" />
			<fileset dir="${output.dir}" />
		</copy>
	</target>

	<target
		name="package"
		depends="initialize, prepare-package"
		description="Take the compiled code and package it in its distributable format."
	>
		<zip destfile="${deploy.dir}/${package.name}.zip">
			<fileset dir="${package.dir}">
				<include name="**/*" />
			</fileset>
		</zip>
	</target>

	<!--
		INTEGRATION-TEST
	-->
	<target name="pre-integration-test" depends="compile" description="Perform actions required before integration tests are executed.">
		<copy todir="${integration-tests.dir}" failonerror="true" filtering="true" flatten="true">
			<fileset dir="${src.dir}">
				<!--
					This is a temporary fudge until we move the source into
					the build directory.
				-->
				<exclude name="target/**" />
				<include name="**/integration-tests/*" />
			</fileset>
		</copy>
		<copy file="${build.dir}/test/integration-tests-app.yaml" tofile="${integration-tests.dir}/app.yaml" failonerror="true" filtering="true" />
		<antcall target="start-local-gae">
			<param name="gae.application.root" value="${integration-tests.dir}"/>
		</antcall>
	</target>

	<target name="-integration-test" description="Process and deploy the package ready for integration testing." />

	<target name="post-integration-test" description="Perform actions required after integration tests have been executed." />

	<target
	 name="integration-test"
	 depends="initialize, pre-integration-test, -integration-test, post-integration-test"
	 description="Test that the package deploys correctly."
	/>

	<!--
		DEPLOY
	-->
	<target name="deploy" depends="initialize, package" description="Deploy the package.">
		<fail unless="gc.username" message="Missing property 'gc.username' from file 'my.ant.properties'." />
		<fail unless="gc.password" message="Missing property 'gc.password' from file 'my.ant.properties'." />

		<gcupload
			username="${gc.username}"
			password="${gc.password}"
			projectname="${project.name}"
			filename="${deploy.dir}/${package.name}.zip"
			targetfilename="${package.name}.zip"
			summary="${project.name} deployment package, version ${version.number}"
			labels="Type-Archive, OpSys-All, Featured"
		/>
	</target>

	<!--
		S I T E
		=======
	-->
	<target name="pre-site" description="Executes processes needed prior to the actual project site generation.">
		<echo>
The target 'pre-site' has not been set. You need to define this
in your own build.xml so that backplanejs knows which files to
document.
		</echo>
		<fail />
	</target>

	<target name="-site" description="Generates the project's site documentation.">
		<exec executable="python" failonerror="true">
			<arg value="${backplanejs.tools.base.dir}/yuidoc/bin/yuidoc.py" />
			<arg value="${tmp.dir}/site-in/docs" />
			<arg value="-p" />
			<arg value="${tmp.dir}/tmpdocs" />
			<arg value="-o" />
			<arg value="${tmp.dir}/site-out/docs" />
			<arg value="-t" />
			<arg value="${backplanejs.tools.base.dir}/yuidoc/template" />
			<arg value="-m" />
			<arg value="${project.name}" />
			<arg value="-Y" />
			<arg value="${platform.version}" />
			<arg value="-v" />
			<arg value="${version.number}" />
			<arg value="-u" />
			<arg value="${site.docs.project.url}" />
		</exec>
	</target>

	<target
		name="post-site"
		description="Executes processes needed to finalize the site generation, and to prepare for site deployment."
	>
		<copy todir="${site.dir}" failonerror="true">
			<fileset dir="${tmp.dir}/site-out" />
		</copy>

		<copy todir="${site.dir}" failonerror="true" overwrite="true" filtering="true">
			<fileset dir="${backplanejs.tools.base.dir}/GoogleAppEngine" includes="app.yaml" />
		</copy>
	</target>

	<target
		name="site"
		depends="initialize, pre-site, -site, post-site, backplanejs-tools.post-site"
		description="Generates the project's site documentation."
	/>

	<target
		name="site-deploy"
		depends="initialize, site"
		description="Deploys the generated site documentation to the specified web server."
	>
		<fail unless="gae.username" message="Missing property 'gae.username' from file 'my.ant.properties'." />
		<fail unless="gae.password" message="Missing property 'gae.password' from file 'my.ant.properties'." />

		<antcall target="-site-deploy-windows" />
		<antcall target="-site-deploy-non-windows" />
	</target>

	<!--
		Annoying to have to do this, but on Windows the @inputstring value doesn't
		seem to get passed in when running a batch file. (And Windows doesn't
		understand @executable="appcfg.py" in the same way that Unix-like platforms
		do.)
	-->
	<target name="-site-deploy-windows" if="on.windows">
		<exec executable="python" failonerror="true" inputstring="${gae.password}">
			<arg value="${gae.windows.install.dir}/appcfg.py" />
			<arg line="--passin -e ${gae.username} update ${site.dir}/" />
		</exec>
	</target>

	<target name="-site-deploy-non-windows" unless="on.windows">
		<exec executable="appcfg.py" failonerror="true" inputstring="${gae.password}">
			<arg line="--passin -e ${gae.username} update ${site.dir}/" />
		</exec>
	</target>
</project>
