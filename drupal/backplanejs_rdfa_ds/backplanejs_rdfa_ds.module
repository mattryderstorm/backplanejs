<?php
// $Id$
/**
 * @file
 * Drupal 6.x module for managing a list of RDFa URLs.
 *
 * 
 * @see http://
 */

/**
 * Implementation of hook_help().
 */
function backplanejs_rdfa_ds_help($path, $arg) {
  switch ($path) {
    
    case 'admin/help#backplanejs_rdfa_ds':
      return '<p>'. t('This module lets you manage a set of URLs that are used as RDFa datasources.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function backplanejs_rdfa_ds_menu() {
  $items['admin/backplanejs/rdfa_ds/ds/list'] = array(
    'title' => 'RDFa datasources',
    'title callback' => 't',
    'description' => 'Manage RDFa datasource URLs.',
    'page callback' => 'backplanejs_rdfa_ds_ds_list',
    'page arguments' => '',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/backplanejs/rdfa_ds/ds/view/%'] = array(
    'title' => 'RDFa datasource detail',
    'page callback' => 'backplanejs_rdfa_ds_ds_view',
    'page arguments' => array(5),
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Return a couple of forms that manage adding/removing URLs.
 */
function backplanejs_rdfa_ds_ds_list() {
  $output .= drupal_get_form('ds_add_form');
  $output .= drupal_get_form('ds_list_form');
  
  return $output;
}

/**
 * Define the the 'add new datasource' form
 */
function ds_add_form($form_state) {
  $form['new_datasource'] = array(
    '#type' => 'fieldset',
    '#title' => t('New datasource'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['new_datasource']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
    '#default_value' => '',
    '#size' => 100,
    '#maxlength' => 1024,
  );
  $form['new_datasource']['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#required' => FALSE,
    '#default_value' => '',
    '#rows' => 5,
    '#cols' => 50,
    '#maxlength' => 1024,
  );
  $form['new_datasource']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add datasource to list'),
  );
  return $form;
}

/**
 * Validate the 'add new datasource' form data
 *
 */
function ds_add_form_validate($form, &$form_state) {
  $new_url = $form_state['values']['url'];
  
  // uri pattern test
  if (!is_url($new_url)) {
    form_set_error('', t('Bad format of datasource URL. Must be an absolute URL including the protocol. eg. \'http://hostname/resource\''));
  }
  // datasource already exists test
  $result = db_query(
    "SELECT dsid FROM {backplanejs_rdfa_ds} WHERE url = '%s'",
    $new_url
  );
  if (db_fetch_object($result)) {
    form_set_error('', t('That datasource already exisits.'));
  }
}

/**
 * Process the 'add new datasource' form data
 */
function ds_add_form_submit($form, &$form_state) {
  db_query(
    'INSERT INTO {backplanejs_rdfa_ds} (url, date_added, notes, date_first_load, date_last_load) '."VALUES ('%s', %d, '%s', %d, %d)",
    $form_state['values']['url'],
    time(),
    $form_state['values']['notes'],
    0,
    0
  );
  drupal_set_message(t('New datasource successfully added.'));
}

/**
 * Define the 'list of datasources' form.
 *
 * TODO: Add control and button that can be used to change the number of datasources shown at once (switch on form_state['values']['op']?)
 */
function ds_list_form($form_state) {

  $ds_per_page = isset($form_state['post']['no_of_ds']) ? $form_state['post']['no_of_ds'] : '10';
  // $ds_per_page_opts = array('10' => '10', '25' => '25', '50' => '50');
  
  // $form['no_of_ds'] = array(
  //  '#type' => 'select',
  // '#title' => 'URLs per page',
  // '#default_value' => $ds_per_page,
  // '#options' => $ds_per_page_opts,
  // );
  
  // $form['choose_ds'] = array(
  //  '#type' => 'submit',
  //  '#value' => t('Update display'),
  // );

  $results = pager_query(
    'SELECT dsid, url FROM {backplanejs_rdfa_ds} ORDER BY dsid DESC', 
    $ds_per_page
  );
  
  $checkbox_opts = array();
  while ($ds = db_fetch_object($results)) {
    $checkbox_opts[$ds->dsid] = $ds->url;
  }
  
  $form['url'] = array(
    '#type' => 'checkboxes',
    '#title' => '',
    '#required' => FALSE,
    '#options' => $checkbox_opts,
    '#tree' => TRUE
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Remove datasource(s)'),
  );
  
  // defaults to '#type' => 'markup'
  $form['pager'] = array('#value' => theme('pager', NULL, $ds_per_page, 0));
  
  return $form;
}

/**
 * Validate the the 'list of datasources' form data.
 */
// function ds_list_form_validate($form, &$form_state) {
// }

/**
 * Process the 'list of datasources' form data.
 *
 * Removes URL(s) from the 'backplanejs_rdfa_ds' table in one query, not a query per URL.
 */
function ds_list_form_submit($form, &$form_state) {

  $operation = $form_state['values']['op'];
  
  switch ($operation) {
    case "Remove datasource(s)":
      $urls_to_delete = array();
      foreach ($form_state['values']['url'] as $val) {
        if ($val > 0) {
          $urls_to_delete[] = $val;
        }
      }
      if (count($urls_to_delete) > 0) {
        // Quoting the %s here leads to only one record being removed even if there's multiple 
        // as SQL 'IN' syntax is a comma separated list of int vals. This style leads to an insecure warning on code review.
        //db_query(
        //  "DELETE FROM {backplanejs_rdfa_ds} WHERE dsid IN (%s)",
        //  implode(',', $urls_to_delete)
        //);
        // Code review seems not to be concerned with this style though
        db_query("DELETE FROM {backplanejs_rdfa_ds} WHERE dsid IN (". implode(',', $urls_to_delete) .")");
        drupal_set_message(t('Datasource(s) removed.'));
      }
      else {
        drupal_set_message(t('No datasources were selected to be removed.'), 'warning');
      }
      break;

    // case "Update display":
    //  drupal_set_message(t('Updated display options'));
    //  break;

    default:
      drupal_set_message(t('Unrecognised operation'));
      break;
  }
}

/**
 * Show (editable) details about a datasource
 */
function backplanejs_rdfa_ds_ds_view($dsid = 0) {
  $results = db_query(
    "SELECT dsid, url, notes, date_added, date_first_load, date_last_load FROM {backplanejs_rdfa_ds} WHERE dsid = '%s'", 
    $dsid
  );
  $output = '';
  if ($ds = db_fetch_object($results)) {
    $output .= drupal_get_form('ds_view_form', $ds);
  }
  else {
    drupal_set_message(t('Datasource not found'));
  }
  return $output;
}

/**
 * Define the the 'view datasource' form
 *
 * TODO: Deal with '$ds->date_first_load' and '$ds->date_last_load' values (when they are being used - display as date_added with #value)
 */
function ds_view_form($form_state, $ds) {
  $form['dsid'] = array(
    '#type' => 'hidden',
    '#default_value' => $ds->dsid,
  );
  $form['date_added'] = array(
    '#type' => 'textfield',
    '#title' => t('Date added'),
    '#value' => date('Y-m-d \a\t H:i:s', $ds->date_added),
    '#size' => 100,
    '#maxlength' => 1024,
    '#disabled' => TRUE
  );
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#required' => TRUE,
    '#default_value' => $ds->url,
    '#size' => 100,
    '#maxlength' => 1024,
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#required' => FALSE,
    '#default_value' => $ds->notes,
    '#rows' => 5,
    '#cols' => 50,
    '#maxlength' => 1024,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update datasource'),
  );
  return $form;
}

/**
 * Validate the 'view datasource' form
 *
 */
function ds_view_form_validate($form, &$form_state) {
  $updated_url = $form_state['values']['url'];
  if (!is_url($updated_url)) {
    form_set_error('', t('Bad format of datasource URL. Must be an absolute URL including the protocol. eg. \'http://hostname/resource\''));
  }
}
  
/**
 * Process the the 'view datasource' form
 *
 */
function ds_view_form_submit($form, &$form_state) {
  db_query(
    "UPDATE {backplanejs_rdfa_ds} SET url = '%s', notes = '%s' WHERE dsid = %d",
    $form_state['values']['url'],
    $form_state['values']['notes'],
    $form_state['values']['dsid']
  );
  drupal_set_message(t('Datasource updated successfully.'));
}
  
/**
 * Implementation of hook_theme().
*/
function backplanejs_rdfa_ds_theme($existing, $type, $theme, $path) {
  return array(
    'ds_list_form' => array(
      'arguments' => array('form' => NULL)
    ),
      'ds_view_form' => array(
      'arguments' => array('form' => NULL)
    ),
  );
}

/**
 * Theming function for the 'list of datasources' form. This enables more specific formatting of it.
 *
 * This function is used because:
 * a) there is an entry in the theme registry for the 'form name' builder function
 * b) this is the same name as the 'form name' builder function with the prefix 'theme_'
 *
 * TODO: Add a 'select all' checkbox to the table header. See note inline.
 */ 
function theme_ds_list_form($form) {
  // Note: theme('table_select_header_cell') shows the 'select all' checkbox required but causes layout issues. 
  // Reference 'node.admin.inc' line 492+ (definition of form) and 561+ (rendering) and see http://api.drupal.org/api/function/theme_table/6.
  // The node_admin_nodes form structure seems quite complicated but it's this structure that allows the layout
  // to separate the checkboxes from labels and have column headers etc. So, for now we'll do without a 'select all'
  // and leave it to be implemented later as changing the form structure means changing the other form functions.
  $header = array(
    array(
      'data' => 'Datasource(s)', 
      'width' => '85%'
    ), 
    array(
      'data' => '', 
      'width' => '15%', 
      'align' => 'center'
    )
  );
  $rows = array();

  foreach ($form['url']['#options'] as $key => $val) {
    $row = array(
      array(
        'data' => drupal_render($form['url'][$key]),
        'width' => '85%'
      ),
      array(
        'data' => l('View detail', 'admin/backplanejs/rdfa_ds/ds/view/'. $key),
        'width' => '15%', 
        'align' => 'center'
      )
    );
    $rows[] = $row;
  }

  if (count($rows) == 0) {
    $rows[] = array('No datasources found', '');
  }
  
  // $output .= drupal_render($form['no_of_ds']);
  // $output .= drupal_render($form['choose_ds']);
  
  $output .= theme('table', $header, $rows);
  $output .= drupal_render($form);
  
  return $output;
}

/**
 * Theming function for the 'view datasource' form.
 *
 * Is this actually needed if you can't pass in the other non-form control info that you want to format?
 */
function theme_ds_view_form($form) {

  $output .= drupal_render($form);
  
  return $output;
}

/*
 * Validation function(s)
 *
 * TODO: Change the Regular expression so that it accepts IP address URLs and 'localhost'.
 * Currently http://bbc.co.uk/abc.html is fine but http://192.168.1.123/abc.html is not
 */
function is_url($s) {
  if (preg_match("/^(http|https)\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?\/?([a-zA-Z0-9\-\._\?\,\'\/\\\+&amp;%\$#\=~])*$/i", $s) == 0) {
    return FALSE;
  }
  return TRUE;
}